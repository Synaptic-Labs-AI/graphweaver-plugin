// esbuild.config.mjs
import esbuild from 'esbuild';
import sveltePlugin from 'esbuild-svelte';
import sveltePreprocess from 'svelte-preprocess';
import process from 'process';
import builtins from 'builtin-modules';
import alias from 'esbuild-plugin-alias';
import path from 'path';
import { fileURLToPath } from 'url';

// Create __dirname equivalent for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const banner = `
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
`;

const prod = process.argv[2] === 'production';

// Define path aliases
const pathAliases = {
  '@adapters': path.resolve(__dirname, 'src/adapters'),
  '@components': path.resolve(__dirname, 'src/components'),
  '@generators': path.resolve(__dirname, 'src/generators'),
  '@managers': path.resolve(__dirname, 'src/managers'),
  '@models': path.resolve(__dirname, 'src/models'),
  '@registrations': path.resolve(__dirname, 'src/registrations'),
  '@services': path.resolve(__dirname, 'src/services'),
  '@settings': path.resolve(__dirname, 'src/settings'),
  '@state': path.resolve(__dirname, 'src/state'),
  '@stores': path.resolve(__dirname, 'src/stores'),
  '@types': path.resolve(__dirname, 'src/types'),
  '@utils': path.resolve(__dirname, 'src/generators/utils'),
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['main.ts'],
  bundle: true,
  external: [
    'obsidian',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2016',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main.js',
  plugins: [
    sveltePlugin({
      preprocess: sveltePreprocess(),
      compilerOptions: {
        css: true
      },
      emitCss: false
    }),
    alias(pathAliases)
  ],
  mainFields: ['svelte', 'browser', 'module', 'main'],
  conditions: ['svelte', 'browser', 'import', 'module', 'default', 'require'],
  resolveExtensions: ['.mjs', '.js', '.ts', '.svelte']
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
